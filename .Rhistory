install.packages("rworldmap")
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
remove.packages("class", lib="~/R/win-library/4.1")
library(Pandem)
remove.packages("class", lib="C:/Program Files/R/R-4.1.2/library")
library(Pandem)
usethis::use_vignette("my-vignette")
library(Pandem)
library(Pandem)
library(Pandem)
remove.packages("tidyverse", lib="~/R/win-library/4.1")
install.packages("tidyverse")
detach("package:Pandem", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
library(Pandem)
detach("package:Pandem", unload = TRUE)
remove.packages("tidyverse", lib="~/R/win-library/4.1")
library(Pandem)
detach("package:Pandem", unload = TRUE)
library(Pandem)
install.packages("qpdf")
library(Pandem)
library(qpdf)
library(Pandem)
Sys.Date()
format(Sys.Date(), "%m/%d/%Y")
format(Sys.Date(), "%Y/%M")
format(Sys.Date(), "%Y-%M")
format(Sys.Date(), "%Y-%w")
format(Sys.Date(), "%Y-%0w")
format(Sys.Date(), "%Y-%w")
format(Sys.Date(), "%m/%d/%Y")
week(Sys.Date())
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
library(Pandem)
download.file(url = "https://opendata.ecdc.europa.eu/covid19/virusvariant/csv/data.csv",
destfile = "data/variants.csv")
variant <- read.csv("data/variants.csv")
variant <- read.csv("data/variants.csv")
save(variant,file = "data/variant.Rdata")
unlink("data/variants.csv")
download.file(url = "https://opendata.ecdc.europa.eu/covid19/agecasesnational/csv/data.csv",
destfile = "data/age_cases.csv")
age_cases <- read.csv("data/age_cases.csv")
save(age_cases,file = "data/age_case.Rdata")
unlink("data/age_cases.csv")
install.packages("splitstackshape")
library(splitstackshape)
case_aggregated = age_cases
case_aggregated <- case_aggregated %>%
select(country_code,year_week,age_group,new_cases)%>%
filter(new_cases > 0)
library(Pandem)
case_aggregated <- case_aggregated %>%
select(country_code,year_week,age_group,new_cases)%>%
filter(new_cases > 0)
# Create table with one variant per line
case_desaggregated <- expandRows(case_aggregated,count='new_cases',drop=T)
View(case_desaggregated)
View(case_aggregated)
View(case_aggregated)
View(age_cases)
variants= variants
variant= variants
variants= variant
# GISAID and TESSy sources are encoded separately
# => Merge both sources for non sequenced sequence
no_sequenced_detected = variants %>%
select(country_code, year_week,new_cases,number_sequenced)%>%
distinct()%>%
group_by(country_code, year_week,new_cases)%>%
summarise(sequenced = max(number_sequenced)) %>%
summarise(n = new_cases-sequenced)%>%
mutate(variant="NSQ") %>%
select(country_code, year_week,variant,n)%>%
filter(n > 0)
View(no_sequenced_detected)
no_sequenced_detected = variants %>%
select(country_code, year_week,new_cases,number_sequenced)%>%
distinct()%>%
group_by(country_code, year_week,new_cases)%>%
summarise(sequenced = max(number_sequenced)) %>%
summarise(n = new_cases-sequenced)%>%
mutate(variant="NSQ") %>%
select(country_code, year_week,variant,n)%>%
filter(new_case > 0)
no_sequenced_detected = variants %>%
select(country_code, year_week,new_cases,number_sequenced)%>%
distinct()%>%
group_by(country_code, year_week,new_cases)%>%
summarise(sequenced = max(number_sequenced)) %>%
summarise(n = new_cases-sequenced)
no_sequenced_detected
no_sequenced_detected = variants %>%
select(country_code, year_week,new_cases,number_sequenced)%>%
distinct()%>%
group_by(country_code, year_week,new_cases)%>%
summarise(sequenced = max(number_sequenced)) %>%
summarise(new_cases = new_cases-sequenced)%>%
mutate(variant="NSQ") %>%
select(country_code, year_week,variant,new_cases)%>%
filter(new_cases > 0)
View(no_sequenced_detected)
# GISAID and TESSy sources are encoded separately
# => Merge both sources for non sequenced sequence
no_sequenced_detected1 = variants %>%
select(country_code, year_week,new_cases,number_sequenced)%>%
distinct()%>%
group_by(country_code, year_week,new_cases)%>%
summarise(sequenced = max(number_sequenced)) %>%
summarise(n = new_cases-sequenced)%>%
mutate(variant="NSQ") %>%
select(country_code, year_week,variant,n)%>%
filter(n > 0)
View(no_sequenced_detected1)
View(variant)
View(no_sequenced_detected1)
# GISAID and TESSy sources are encoded separately
# => Merge both sources for sequenced sequence
detected_variants <- variants %>%
group_by(country_code, year_week, variant) %>%
summarise(new_cases = max(number_detections_variant)) %>%
filter(n > 0)
detected_variants <- variants %>%
group_by(country_code, year_week, variant) %>%
summarise(new_cases = max(number_detections_variant)) %>%
filter(new_cases > 0)
View(no_sequenced_detected1)
View(no_sequenced_detected)
View(no_sequenced_detected1)
detected_variants
no_sequenced_detected
aggregate <- variant
aggregate
upload_ecdc <- function() {
dir.create("data", showWarnings = FALSE)
#################################################################################
# upload data
#################################################################################
########### variant
download.file(url = "https://opendata.ecdc.europa.eu/covid19/virusvariant/csv/data.csv",
destfile = "data/variants_aggregated.csv")
variants_aggregated <- read.csv("data/variants_aggregated.csv")
save(variants_aggregated,file = "data/variants_aggregated.RData")
unlink("data/variants_aggregated.csv")
########### cases database
download.file(url = "https://opendata.ecdc.europa.eu/covid19/agecasesnational/csv/data.csv",
destfile = "data/case_aggregated.csv")
case_aggregated <- read.csv("data/case_aggregated.csv")
save(case_aggregated,file = "data/case_aggregated.RData")
unlink("data/case_aggregated.csv")
}
dir.create("data", showWarnings = FALSE)
#################################################################################
# upload data
#################################################################################
########### variant
download.file(url = "https://opendata.ecdc.europa.eu/covid19/virusvariant/csv/data.csv",
destfile = "data/variants_aggregated.csv")
variants_aggregated <- read.csv("data/variants_aggregated.csv")
save(variants_aggregated,file = "data/variants_aggregated.RData")
unlink("data/variants_aggregated.csv")
########### cases database
download.file(url = "https://opendata.ecdc.europa.eu/covid19/agecasesnational/csv/data.csv",
destfile = "data/case_aggregated.csv")
case_aggregated <- read.csv("data/case_aggregated.csv")
save(case_aggregated,file = "data/case_aggregated.RData")
unlink("data/case_aggregated.csv")
library(Pandem)
library(Pandem)
download.file(url = "https://opendata.ecdc.europa.eu/covid19/virusvariant/csv/data.csv",
destfile = "data/variants_aggregated.csv")
download.file(url = "https://opendata.ecdc.europa.eu/covid19/agecasesnational/csv/data.csv",
destfile = "data/case_aggregated.csv")
library(Pandem)
library(Pandem)
library(Pandem)
download.file(url = "https://opendata.ecdc.europa.eu/covid19/virusvariant/csv/data.csv",
destfile = "data/variants_aggregated.csv")
variants_aggregated <- tibble(read.csv("data/variants_aggregated.csv"))
library(tidyverse)
variants_aggregated <- tibble(read.csv("data/variants_aggregated.csv"))
variants_aggregated
save(variants_aggregated,file = "data/variants_aggregated.RData")
unlink("data/variants_aggregated.csv")
download.file(url = "https://opendata.ecdc.europa.eu/covid19/agecasesnational/csv/data.csv",
destfile = "data/case_aggregated.csv")
case_aggregated <- read.csv("data/case_aggregated.csv")
case_aggregated <- tibble(read.csv("data/case_aggregated.csv"))
case_aggregated
save(case_aggregated,file = "data/case_aggregated.RData")
unlink("data/case_aggregated.csv")
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
mode = T
mode == T
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
variants_desaggragated
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
test = c()
length(test)
test= "new_case"
length(test)
test= ""
length(test)
test = NULL
length(test)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
test = "2021-02-10"
as.numeric(test)
as.numeric(test)
as.numeric(as.Date(test))
as.POSIXct.numeric(as.Date(test))
as.POSIXlt.numeric(as.Date(test))
as.Date.POSIXct(as.Date(test))
test
as.Date.POSIXlt(as.Date(test))
library(Pandem2simulator)
library(Pandem2simulator)
daily
library(Pandem2simulator)
test_country
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
devtools::install_github("maous1/Pandem2simulator")
devtools::install_github("tidyverse/tidyverse")
.lin
.libPaths()
dyn.load()
dyn.load(.libPaths()[1])
install.packages("tidyverse")
library(tidyselect, lib.loc = "/usr/lib/R/library")
library(tidyr, lib.loc = "/usr/lib/R/library")
library(rlang, lib.loc = "/usr/lib/R/library")
remove.packages("tidyr", lib="/usr/lib/R/library")
detach("package:rlang", unload = TRUE)
detach("package:tidyselect", unload = TRUE)
detach("package:tidyr", unload = TRUE)
remove.packages("dplyr", lib="/usr/lib/R/library")
install.packages("tidyverse")
install.packages("readr", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("tidyverse")
install.packages("tidyverse", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
remove.packages("dplyr", lib="/usr/lib/R/library")
install.packages("tidyverse")
install.packages("tidyverse", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
x <- seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by = "1 month")
yearmonth(x)
x = x[1]
month(x = )
month(x = x)
format(x , "%Y-%m")
good = try(1 + 1, silent = TRUE)
bad = try(1 + "1", silent = TRUE)
bad = try(1 + "1", silent = TRUE)
bad = try(1 + "1")
bad = 1 + "1"
intersect(names(trainset_list),names(testset_list))
message()
message("hello")
message(system.time())
system()
message(system.time())
message(Sys.time())
version
library(Pandem2simulator)
100*10
1000/60
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
load("C:/Users/Mabonjean/Desktop/Pandem2simulator/data/Genomic_data_ECDCvariants.RData")
View(genomic_data)
install.packages("styler")
library(styler)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_active_pkg()
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
position = NULL
!is.null(position)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
detach("package:Pandem2simulator", unload = TRUE)
library(Pandem2simulator)
detach("package:Pandem2simulator", unload = TRUE)
library(Pandem2simulator)
rm -Rf /tmp/Rtmp9leeoU/Rd2pdf31292d903c0
R CMD Rd2pdf Pandem2simulator
--no-clean
install.packages("ggplot2")
devtools::check_win_devel()
install.packages("devtools")
library(devtools)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
detach("package:dplyr", unload = TRUE)
library(Pandem2simulator)
detach("package:dplyr", unload = TRUE)
remove.packages("dplyr", lib="/usr/lib/R/library")
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
data("genomic_data")
save(genomic_data,file = 'data/Genomic_data_ECDCvariants.RData')
library(Pandem2simulator)
data("Genomic_data_ECDCvariants")
library(devtools)
devtools::document()
library(Pandem2simulator)
tools::Rdindex()
library(tools, lib.loc = "/usr/lib/R/library")
tools::Rdindex()
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
library(Pandem2simulator)
